#!/bin/bash

# Usage: mdPdfExport.sh <inputDir> <outputFile> [--pdf] [--title "Title Here"]

INPUT_DIR=""
OUTPUT_PATH=""
GENERATE_PDF=false
DOC_TITLE=""

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --pdf)
            GENERATE_PDF=true
            shift
            ;;
        --title)
            shift
            if [[ -n "$1" ]]; then
                DOC_TITLE="$1"
                shift
            else
                echo "  --title requires an argument."
                exit 1
            fi
            ;;
        -*)
            echo " Unknown option: $1"
            exit 1
            ;;
        *)
            if [[ -z "$INPUT_DIR" ]]; then
                INPUT_DIR="$1"
            elif [[ -z "$OUTPUT_PATH" ]]; then
                OUTPUT_PATH="$1"
            else
                echo "  Too many positional arguments."
                exit 1
            fi
            shift
            ;;
    esac
done

# Show usage if required inputs are missing
if [[ -z "$INPUT_DIR" ]]; then
    echo "Usage: $0 <input directory> <output file (optional)> [--pdf] [--title \"Your Title\"]"
    exit 1
fi

# Default output if not provided
if [[ -z "$OUTPUT_PATH" ]]; then
    OUTPUT_PATH="output.md"
fi

# Resolve base and directory
OUTPUT_DIR="$(dirname "$OUTPUT_PATH")"
OUTPUT_BASENAME="$(basename "$OUTPUT_PATH" .md)"
OUTPUT_MD="$OUTPUT_DIR/$OUTPUT_BASENAME.md"
OUTPUT_PDF="$OUTPUT_DIR/$OUTPUT_BASENAME.pdf"
TEMP_MD="$OUTPUT_DIR/$OUTPUT_BASENAME.temp.md"

# Use folder name as fallback title
if [[ -z "$DOC_TITLE" ]]; then
    DOC_TITLE="$(basename "$INPUT_DIR")"
fi

# Ensure output markdown is clean
rm -f "$OUTPUT_MD" "$TEMP_MD"

sanitize_md() {
  sed -E 's/^---$/***/'
}

echo "  Scanning: $INPUT_DIR"
echo "  Output MD: $OUTPUT_MD"
$GENERATE_PDF && echo "  Output PDF: $OUTPUT_PDF"
echo "Document Title: $DOC_TITLE"

# Recursively walk directories, skipping _-prefixed
find "$INPUT_DIR" -type d \
    ! -regex '.*/\..*' \
    ! -regex '.*/_.*' | sort | while read -r dir; do
    # Process readme.md first (case-insensitive)
    for readme in "$dir"/[Rr][Ee][Aa][Dd][Mm][Ee].md; do
        [[ -f "$readme" ]] || continue
        echo "  + Adding (readme): $readme"
        sed -E 's/^-{3,}$/***/' "$readme" >> "$OUTPUT_MD"
        cat >> "$OUTPUT_MD" <<'EOF'

```{=latex}
\newpage
```
EOF
    done

    # Process other .md files (excluding readme.md)
    find "$dir" -maxdepth 1 -type f -name "*.md" ! -iname "readme.md" | sort | while read -r file; do
        echo "  + Adding (file): $file"
        sed -E 's/^-{3,}$/***/' "$file" >> "$OUTPUT_MD"
        cat >> "$OUTPUT_MD" <<'EOF'

```{=latex}
\newpage
```
EOF
    done
done

echo "Markdown created: $OUTPUT_MD"

# Generate PDF if requested
if $GENERATE_PDF; then
    if command -v pandoc >/dev/null 2>&1; then
        echo "  Preparing temporary PDF input..."

        STAGING_DIR="./_pdf-images"
        mkdir -p "$STAGING_DIR"

        # Copy and convert supported images to PNG into staging directory
        echo "  Copying and converting images to: $STAGING_DIR"
        find "$INPUT_DIR" -type d -name Media | while read -r media_dir; do
            find "$media_dir" -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.webp" -o -iname "*.svg" \) | while read -r img; do
                ext="${img##*.}"
                base="$(basename "$img" | sed -E 's/\.[a-zA-Z0-9]+$//')"
                out_file="$STAGING_DIR/${base}.png"
                echo "  + Converting $img â†’ $out_file"
                convert "$img" -resize '500x500>' "$out_file" 2>/dev/null
            done
        done

        # Rebuild markdown with fixed image references
        echo "  Rewriting markdown image paths..."

        {
            echo "---"
            echo "title: \"$DOC_TITLE\""
            echo "author: \"Generated by mdPdfExport\""
            echo "date: \"$(date +%Y-%m-%d)\""
            echo "toc: true"
            echo "fontsize: 10pt"
            echo "documentclass: article"
            echo "geometry: margin=1in"
            echo "mainfont: \"TeX Gyre Termes\""
            echo "sansfont: \"TeX Gyre Heros\""
            echo "header-includes:"
            echo "  - \usepackage{sectsty}"
            echo "  - \allsectionsfont{\sffamily\bfseries}"
            echo "  - \usepackage{titlesec}"
            echo "  - \titleformat{\section}{\sffamily\bfseries\fontsize{16}{18}\selectfont}{\thesection}{1em}{}"
            echo "  - \titleformat{\subsection}{\sffamily\bfseries\fontsize{14}{16}\selectfont}{\thesubsection}{1em}{}"
            echo "  - \titleformat{\subsubsection}{\sffamily\bfseries\fontsize{13}{15}\selectfont}{\thesubsubsection}{1em}{}"
            echo "  - \titleformat{\paragraph}{\sffamily\bfseries\fontsize{12}{14}\selectfont}{\theparagraph}{1em}{}"
            echo "  - \titleformat{\subparagraph}{\sffamily\bfseries\fontsize{12}{14}\selectfont}{\thesubparagraph}{1em}{}"
            echo "---"
            echo ""
            echo '```{=latex}'
            echo '\newpage'
            echo '```'
            echo ""
        } > "$TEMP_MD"

        while IFS= read -r line; do
            if [[ "$line" =~ '!' && "$line" =~ \]\( ]]; then
                path=$(echo "$line" | sed -nE 's/.*!\[[^]]*\]\(([^)]+)\).*/\1/p')
                if [[ "$path" =~ ^https?:// ]]; then
                    echo "$line" >> "$TEMP_MD"
                else
                    filename=$(basename "$path" | sed -E 's/\.[a-zA-Z0-9]+$/.png/')
                    alt_text=$(echo "$line" | sed -nE 's/.*!\[([^]]*)\]\(.*/\1/p')
                    echo ':::{ .center }' >> "$TEMP_MD"
                    echo "![${alt_text}]($filename){ width=2.5in }" >> "$TEMP_MD"
                    echo ':::' >> "$TEMP_MD"
                fi
            else
                echo "$line" >> "$TEMP_MD"
            fi
        done < "$OUTPUT_MD"

        echo "Resource Path for Pandoc: $STAGING_DIR"

        echo "Converting to PDF using Pandoc + pdflatex..."
        pandoc "$TEMP_MD" -o "$OUTPUT_PDF" \
            --pdf-engine=pdflatex \
            --toc \
            --resource-path="$STAGING_DIR"

        echo "PDF created: $OUTPUT_PDF"
        rm -f "$TEMP_MD"
        rm -rf "$STAGING_DIR"
        echo "Temp files removed."
    else
        echo "Pandoc not found. Please install it via: brew install pandoc"
    fi
fi