#!/bin/bash

# Usage: mdEpubExport.sh <inputDir> <outputFile.epub> [--title "Title"] [--author "Author"] [--cover cover.png]

INPUT_DIR=""
OUTPUT_PATH=""
DOC_TITLE=""
DOC_AUTHOR=""
COVER_IMAGE=""

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --title)
            shift
            DOC_TITLE="$1"
            shift
            ;;
        --author)
            shift
            DOC_AUTHOR="$1"
            shift
            ;;
        --cover)
            shift
            COVER_IMAGE="$1"
            shift
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *)
            if [[ -z "$INPUT_DIR" ]]; then
                INPUT_DIR="$1"
            elif [[ -z "$OUTPUT_PATH" ]]; then
                OUTPUT_PATH="$1"
            else
                echo "Too many positional arguments."
                exit 1
            fi
            shift
            ;;
    esac
done

[[ -z "$DOC_AUTHOR" ]] && DOC_AUTHOR="Generated by mdEpubExport"
[[ -z "$DOC_TITLE" ]] && DOC_TITLE="$(basename "$INPUT_DIR")"
[[ -z "$OUTPUT_PATH" ]] && OUTPUT_PATH="output.epub"
[[ -z "$INPUT_DIR" ]] && {
    echo "Usage: $0 <inputDir> <output.epub> [--title \"Title\"] [--author \"Author\"] [--cover cover.png]"
    exit 1
}

OUTPUT_DIR="$(dirname "$OUTPUT_PATH")"
OUTPUT_BASENAME="$(basename "$OUTPUT_PATH" .epub)"
OUTPUT_EPUB="$OUTPUT_DIR/$OUTPUT_BASENAME.epub"
OUTPUT_MD="$OUTPUT_DIR/$OUTPUT_BASENAME.md"
TEMP_MD="$OUTPUT_DIR/$OUTPUT_BASENAME.temp.md"
STAGING_DIR="./_epub-images"

rm -f "$OUTPUT_MD" "$TEMP_MD"
mkdir -p "$STAGING_DIR"

sanitize_md() {
  sed -E 's/^---+$/***/'
}

echo "Title: $DOC_TITLE"
echo "  + Author: $DOC_AUTHOR"
[[ -n "$COVER_IMAGE" ]] && echo "  + Cover: $COVER_IMAGE"
echo "Markdown Output: $OUTPUT_MD"
echo "EPUB Output: $OUTPUT_EPUB"

# Combine and sanitize Markdown
find "$INPUT_DIR" -type d ! -regex '.*/\..*' ! -regex '.*/_.*' | sort | while read -r dir; do
    for readme in "$dir"/[Rr][Ee][Aa][Dd][Mm][Ee].md; do
        [[ -f "$readme" ]] && {
            echo "  + Adding README: $readme"
            sanitize_md < "$readme" >> "$OUTPUT_MD"
            echo -e '\n<div style="page-break-after: always;"></div>\n' >> "$OUTPUT_MD"
        }
    done
    find "$dir" -maxdepth 1 -type f -iname "*.md" ! -iname "readme.md" | sort | while read -r file; do
        echo "  + Adding file: $file"
        sanitize_md < "$file" >> "$OUTPUT_MD"
        echo -e '\n<div style="page-break-after: always;"></div>\n' >> "$OUTPUT_MD"
    done
done

# Process images
find "$INPUT_DIR" -type d -name Media | while read -r media_dir; do
    find "$media_dir" -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.webp" -o -iname "*.svg" \) | while read -r img; do
        base="$(basename "$img" | sed -E 's/\.[a-zA-Z0-9]+$//')"
        out_file="$STAGING_DIR/${base}.png"
        echo "  = Converting $img → $out_file"
        convert "$img" -resize '600x600>' "$out_file" 2>/dev/null
    done
done

# Write YAML header
{
  echo "---"
  echo "title: \"$DOC_TITLE\""
  echo "author: \"$DOC_AUTHOR\""
  echo "date: \"$(date +%Y-%m-%d)\""
  echo "toc: true"
  echo "language: en"
  echo "rights: \"© $(date +%Y) $DOC_AUTHOR\""
  echo "..."
  echo ""
} > "$TEMP_MD"

# Optional cover image
if [[ -n "$COVER_IMAGE" ]]; then
    cp "$COVER_IMAGE" "$STAGING_DIR/"
    cover_file="$(basename "$COVER_IMAGE")"
    echo "![Cover]($cover_file){ width=100% }" >> "$TEMP_MD"
    echo -e '\n<div style="page-break-after: always;"></div>\n' >> "$TEMP_MD"
fi

# Sanitize inline image references
while IFS= read -r line; do
    if [[ "$line" =~ '!' && "$line" =~ \]\( ]]; then
        path=$(echo "$line" | sed -nE 's/.*!\[[^]]*\]\(([^)]+)\).*/\1/p')
        if [[ "$path" =~ ^https?:// ]]; then
            echo "$line"
        else
            filename=$(basename "$path" | sed -E 's/\.[a-zA-Z0-9]+$/.png/')
            alt_text=$(echo "$line" | sed -nE 's/.*!\[([^]]*)\]\(.*/\1/p')
            echo "<figure style=\"text-align: center; margin: 1em 0;\">"
            echo "  <img src=\"$filename\" alt=\"$alt_text\" style=\"width: 2.5in; max-width: 100%; height: auto;\" />"
            echo "</figure>"
        fi
    else
        echo "$line"
    fi
done < "$OUTPUT_MD" >> "$TEMP_MD"

# Run Pandoc
echo "Generating EPUB..."
pandoc "$TEMP_MD" -o "$OUTPUT_EPUB" \
  --toc \
  --resource-path="$STAGING_DIR" \
  ${COVER_IMAGE:+--epub-cover-image="$COVER_IMAGE"}

echo "EPUB created at: $OUTPUT_EPUB"

# Cleanup
rm -f "$TEMP_MD" "$OUTPUT_MD"
rm -rf "$STAGING_DIR"