
<#
.SYNOPSIS
Combines Markdown files into one .md file, and optionally converts it to PDF using Pandoc.

.PARAMETER inputDir
Directory to scan for Markdown files.

.PARAMETER outputFile
Final output path (without extension).

.PARAMETER title
Document title.

.PARAMETER generatePdf
Switch to generate PDF output.

.EXAMPLE
.\mdCombine.ps1 -inputDir ".\docs" -outputFile ".\output\combined" -title "My Guide" -generatePdf
#>

param (
    [string]$inputDir,
    [string]$outputFile = "output",
    [string]$title = $(Split-Path $inputDir -Leaf),
    [switch]$generatePdf
)

# Resolve paths
$outputDir = Split-Path -Path $outputFile
$outputBasename = Split-Path -Leaf $outputFile
$outputMd = "$outputFile.md"
$outputPdf = "$outputFile.pdf"
$tempMd = "$outputFile.temp.md"
$stagingDir = "_pdf-images"

# Ensure directories exist
if (!(Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir | Out-Null
}
Remove-Item -Path $outputMd, $tempMd -ErrorAction SilentlyContinue
New-Item -ItemType Directory -Path $stagingDir -Force | Out-Null

Write-Host "` Scanning: $inputDir"
Write-Host "üìÑ Output MD: $outputMd"
if ($generatePdf) { Write-Host "üìÑ Output PDF: $outputPdf" }
Write-Host " Title: $title"

# Markdown combination with header sanitation
Get-ChildItem -Recurse -Path $inputDir -Include *.md | Where-Object {
    $_.Name -notmatch '^README.md$' -and $_.FullName -notmatch '\\_'
} | Sort-Object FullName | ForEach-Object {
    $content = Get-Content $_.FullName | ForEach-Object {
        if ($_ -match '^-{3,}$') { '***' } else { $_ }
    }
    $content | Out-File -Append $outputMd
    "`n```{=latex}`n\newpage`n```" | Out-File -Append $outputMd
}

Write-Host "‚úÖ Markdown created."

# Build PDF
if ($generatePdf) {
    if (-not (Get-Command pandoc -ErrorAction SilentlyContinue)) {
        Write-Warning "Pandoc is not installed. Install it from https://pandoc.org/installing.html"
        exit 1
    }

    Write-Host " Processing images for PDF..."
    Get-ChildItem -Recurse -Path $inputDir -Include *.png, *.jpg, *.jpeg, *.webp, *.svg | ForEach-Object {
        $base = [System.IO.Path]::GetFileNameWithoutExtension($_.Name)
        $outFile = "$stagingDir\$base.png"
        magick $_.FullName -resize 500x500^> $outFile
    }

    Write-Host "üìù Writing Pandoc metadata..."
    @"
---
title: "$title"
author: "Generated by mdCombine.ps1"
date: "$(Get-Date -Format 'yyyy-MM-dd')"
toc: true
fontsize: 10pt
documentclass: article
geometry: margin=1in
mainfont: "TeX Gyre Termes"
sansfont: "TeX Gyre Heros"
header-includes:
  - \usepackage{sectsty}
  - \allsectionsfont{\sffamily\bfseries}
  - \usepackage{titlesec}
  - \titleformat{\section}{\sffamily\bfseries\fontsize{16}{18}\selectfont}{\thesection}{1em}{}
  - \titleformat{\subsection}{\sffamily\bfseries\fontsize{14}{16}\selectfont}{\thesubsection}{1em}{}
  - \titleformat{\subsubsection}{\sffamily\bfseries\fontsize{13}{15}\selectfont}{\thesubsubsection}{1em}{}
  - \titleformat{\paragraph}{\sffamily\bfseries\fontsize{12}{14}\selectfont}{\theparagraph}{1em}{}
  - \titleformat{\subparagraph}{\sffamily\bfseries\fontsize{12}{14}\selectfont}{\thesubparagraph}{1em}{}
---
```{=latex}
\newpage
```
"@ | Out-File -Encoding utf8 -FilePath $tempMd

# Append content
Get-Content $outputMd | Out-File -Append -Encoding utf8 $tempMd

Write-Host " Converting to PDF..."
pandoc $tempMd -o $outputPdf `
    --pdf-engine=pdflatex `
    --toc `
    --resource-path=$stagingDir

Write-Host " PDF created at $outputPdf"

# Cleanup
Remove-Item $tempMd -Force
Remove-Item $stagingDir -Recurse -Force
}
