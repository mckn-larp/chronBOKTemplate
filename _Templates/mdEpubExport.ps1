# PowerShell version of mdEpubExport

param(
    [Parameter(Mandatory=$true)][string]$InputDir,
    [Parameter(Mandatory=$true)][string]$OutputPath,
    [string]$Title = "",
    [string]$Author = "Generated by mdEpubExport",
    [string]$Cover = ""
)

$OutputDir = Split-Path $OutputPath
$BaseName = [System.IO.Path]::GetFileNameWithoutExtension($OutputPath)
$OutputMd = Join-Path $OutputDir "$BaseName.md"
$TempMd = Join-Path $OutputDir "$BaseName.temp.md"
$EpubOutput = Join-Path $OutputDir "$BaseName.epub"
$StagingDir = "_epub-images"

Remove-Item $OutputMd, $TempMd -ErrorAction SilentlyContinue
New-Item -ItemType Directory -Path $StagingDir -Force | Out-Null

if (-not $Title) {
    $Title = Split-Path $InputDir -Leaf
}

function Sanitize-Md($line) {
    return $line -replace '^---+$', '***'
}

Write-Host "üìö Title: $Title"
Write-Host "üë§ Author: $Author"
if ($Cover) { Write-Host "üñºÔ∏è Cover: $Cover" }
Write-Host "üìù Markdown Output: $OutputMd"
Write-Host "üìò EPUB Output: $EpubOutput"

# Combine markdown files
Get-ChildItem -Path $InputDir -Recurse -Include *.md | ForEach-Object {
    if ($_.Name -match 'README\.md') {
        Write-Host "  + Adding README: $($_.FullName)"
    } else {
        Write-Host "  + Adding File: $($_.FullName)"
    }
    Get-Content $_.FullName | ForEach-Object { Sanitize-Md $_ } | Add-Content $OutputMd
    Add-Content $OutputMd "`n<div style='page-break-after: always;'></div>`n"
}

# Convert and copy images
Get-ChildItem -Path $InputDir -Recurse -Include *.png, *.jpg, *.jpeg, *.webp, *.svg | ForEach-Object {
    $basename = [System.IO.Path]::GetFileNameWithoutExtension($_.Name)
    $outputFile = Join-Path $StagingDir "$basename.png"
    Write-Host "  = Converting $($_.Name) ‚Üí $outputFile"
    magick $_.FullName -resize 600x600 `>` $outputFile
}

# Create YAML metadata
@"
---
title: "$Title"
author: "$Author"
date: "$(Get-Date -Format yyyy-MM-dd)"
toc: true
language: en
rights: "¬© $(Get-Date -Format yyyy) $Author"
...
"@ | Out-File -FilePath $TempMd -Encoding utf8

if ($Cover) {
    Copy-Item $Cover $StagingDir
    $coverName = [System.IO.Path]::GetFileName($Cover)
    Add-Content $TempMd "`n![Cover]($coverName){ width=100% }`n"
    Add-Content $TempMd "`n<div style='page-break-after: always;'></div>`n"
}

# Rewrite image paths
Get-Content $OutputMd | ForEach-Object {
    if ($_ -match '!\[.*?\]\((.*?)\)') {
        $alt = ($_ -replace '!\[([^\]]*)\]\(.*\)', '$1')
        $file = ($_ -replace '.*!\[[^\]]*\]\(([^)]+)\).*', '$1')
        if ($file -notmatch '^https?://') {
            $img = [System.IO.Path]::GetFileNameWithoutExtension($file) + '.png'
            @"
<figure style='text-align: center; margin: 1em 0;'>
  <img src='$img' alt='$alt' style='width: 2.5in; max-width: 100%; height: auto;' />
</figure>
"@
        } else {
            $_
        }
    } else {
        $_
    }
} | Add-Content $TempMd

# Run Pandoc
Write-Host "Generating EPUB..."
pandoc $TempMd -o $EpubOutput --toc --resource-path="$StagingDir" @(if ($Cover) { "--epub-cover-image=$Cover" })

Write-Host "‚úÖ EPUB created at: $EpubOutput"

Remove-Item $TempMd, $OutputMd -Force
Remove-Item $StagingDir -Recurse -Force